
<h3>Books</h3>

<h4>Books selected: @BooksSelectedCount</h4>
@if (booksSelected == null || booksSelected.Count == 0)
{
    <p>No books selected</p>
}
else
{
    @foreach (var item in booksSelected)
    {
        <span class="me-4">@item.Title</span>
    }

}

@if (books == null)
{
    <h1>Loading...</h1>

}
else if (books.Count == 0)
{
    <h5>There are no books</h5>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <td>Id</td>
                <td>Title</td>
                <td>Author</td>
                <td>Description</td>
                <td>Delete book</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in books)
            {
                <tr>
                    <td><a href=@($"/book-details/{item.Id}")>@item.Id</a></td>
                    <td>@item.Title</td>
                    <td>@item.Author</td>
                    <td>@item.Description</td>
                    <button class="oi oi-delete btn btn-danger" @onclick="(() => OpenDialog(item))"></button>
                    <td><input type="checkbox" @onchange="eventArgs => { CheckboxClicked(item, eventArgs); }" /></td>
                    @*        <button class="oi oi-pencil btn btn-primary" @onclick="(() => EditBook(item.Id))"></button>*@
                </tr>
            }
        </tbody>
    </table>
}



@if (CloseDialog)
{
    <ModalComponent BookModal="book" OnClose="OnCloseDialog" DialogType="ModalComponent.ModalDialogType.DeleteCancel" OnEdit="OnEditDialog" />
}


@if (isEdit)
{
    <div class="mt-5">
        <h4>Edit a book </h4>
        <EditForm Model="@editBook" OnValidSubmit="@HandleEditSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <FieldComponent Label="Title">
                <Control>
                    <InputText id="title" class="form-control" @bind-Value="editBook.Title" />
                </Control>
            </FieldComponent>
            <FieldComponent Label="Description">
                <Control>
                    <InputText id="description" class="form-control" @bind-Value="editBook.Description" />
                </Control>
            </FieldComponent>
            <FieldComponent Label="Title">
                <Control>
                    <InputText id="author" class="form-control" @bind-Value="editBook.Author" />
                </Control>
            </FieldComponent>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
}

@code {
    @page "/books"
    @using System.Net.Http
    @using Data
    @using WEB_API.Entities

    //Book select
    private int BooksSelectedCount = 0;
    private List<Book> booksSelected = new List<Book>();
    private void CheckboxClicked(Book item, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            booksSelected.Add(item);
            BooksSelectedCount++;
        }
        else
        {
            booksSelected.Remove(item);
            BooksSelectedCount--;
        }
    }

    //Modal
    public bool CloseDialog { get; set; }
    private Book book { get; set; }

    private void OnCloseDialog(bool accepted)
    {
        if (accepted)
        {
            DeleteBook(book.Id);
        }
        CloseDialog = false;
        StateHasChanged();
    }

    private async void OnEditDialog(Book EditBook)
    {
        await BookService.UpdateBook(EditBook);
    }
    private void OpenDialog(Book item)
    {
        book = item;
        book.Author = item.Author;
        book.Description = item.Description;
        CloseDialog = true;
        StateHasChanged();
    }

    private List<Book> books;
    private Book newBook = new Book();
    public bool isEdit = false;
    private Book editBook = new Book();

    [Inject]
    public IBookService BookService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetBooks();
    }

    private async void DeleteBook(int id)
    {
        await BookService.DeleteBook(id);
        books = await BookService.GetBooks();
        StateHasChanged();
    }

    private async void EditBook(int id)
    {
        isEdit = true;
        editBook = await BookService.GetBookById(id);
        StateHasChanged();
    }

    private async void HandleEditSubmit()
    {
        await BookService.UpdateBook(editBook);
        isEdit = false;
        books = await BookService.GetBooks();
        StateHasChanged();
    }
}
